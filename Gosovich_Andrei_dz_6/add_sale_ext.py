
__author__ = "Госович Андрей Михайлович"

# 6.	Реализовать простую систему хранения данных о суммах продаж булочной.
# Должно быть два скрипта с интерфейсом командной строки: для записи данных и для вывода на экран записанных данных.
# При записи передавать из командной строки значение суммы продаж.
# Для чтения данных реализовать в командной строке следующую логику:
# ●	просто запуск скрипта — выводить все записи;
# ●	запуск скрипта с одним параметром-числом — выводить все записи с номера, равного этому числу, до конца;
# ●	запуск скрипта с двумя числами — выводить записи, начиная с номера,
# равного первому числу, по номер, равный второму числу, включительно.
# Подумать, как избежать чтения всего файла при реализации второго и третьего случаев.
# Данные хранить в файле bakery.csv в кодировке utf-8. Нумерация записей начинается с 1. Примеры запуска скриптов:
# python add_sale.py 5978,5
# python add_sale.py 8914,3
# python add_sale.py 7879,1
# python add_sale.py 1573,7
# python show_sales.py
# 5978,5
# 8914,3
# 7879,1
# 1573,7
# python show_sales.py 3
# 7879,1
# 1573,7
# python show_sales.py 1 3
# 5978,5
# 8914,3
# 7879,1

# 7.	*(вместо 6) Добавить возможность редактирования данных при помощи отдельного скрипта:
# передаём ему номер записи и новое значение.
# При этом файл не должен читаться целиком — обязательное требование.
# Предусмотреть ситуацию, когда пользователь вводит номер записи, которой не существует.

import sys

if len(sys.argv) == 3:
    with open("bakery.csv", "r+", encoding="utf-8") as sales_file:
        sales_file.seek(0, 2)
        end_of_file = sales_file.tell()
        i = 52 * (int(sys.argv[1]) - 1)
        if i <= end_of_file:
            sales_file.seek(i)
            print(f"{sys.argv[2]:<50}", file=sales_file)
        else:
            if input("Внимание! Записи с таким номером не существует! Добавить в конец файла (y/n)? ") == "y":
                # i = end_of_file
                # sales_file.seek(i)
                print(f"{sys.argv[2]:<50}", file=sales_file)

