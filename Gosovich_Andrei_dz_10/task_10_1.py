
__author__ = "Госович Андрей Михайлович"

# 1.	Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц: 3 на 2, 3 на 3, 2 на 4.
#
# 31	22
# 37	43
# 51	86
#
# 3	5	32
# 2	4	6
# -1	64	-8
#
# 3	5	8	3
# 8	3	7	1
#
#
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для  сложения двух объектов класса Matrix (двух матриц).
# Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно.
# Первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и пр.


class Matrix:
    def __init__(self, list_of_lists):
        self.matrix = list_of_lists

    def __str__(self):
        for row in self.matrix:
            for cel in row:
                print(cel, end=' ')
            print('')
        return ''

    def __add__(self, other):
        '''
        Сложение двух матриц с одинаковым количеством элементов
        :param other: матрица, с которой необходимо сложить
        :return: новая матрица
        '''
        tmp_list = self.matrix[:]
        for row_n in range(len(self.matrix)):
            for cel_n in range(len(self.matrix[row_n])):
                tmp_list[row_n][cel_n] += other.matrix[row_n][cel_n]
        return Matrix(tmp_list)


m = Matrix([[31, 22, 12], [37, 43, 44], [51, 86, 1]])
m_2 = Matrix([[1, 1, 1], [1, 1, 1], [1, 1, 1]])
print(m)
print(m_2)
print(m + m_2)
